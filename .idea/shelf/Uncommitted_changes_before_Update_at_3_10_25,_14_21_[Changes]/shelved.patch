Index: src/main/java/org/aiedwise2024/aiedproject/GrammarFormQuestionGenerationServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.aiedwise2024.aiedproject;\n\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.annotation.HttpConstraint;\nimport jakarta.servlet.annotation.ServletSecurity;\nimport jakarta.servlet.annotation.WebServlet;\nimport jakarta.servlet.http.HttpServlet;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\nimport com.google.gson.Gson; //google's JSON converter\n\nimport static org.aiedwise2024.aiedproject.LMmessage.ROLE_SYSTEM;\nimport static org.aiedwise2024.aiedproject.LMmessage.ROLE_USER;\n\n/**\n * A servlet that handles question generation for students who\n * wish for more practice on a specific grammatic form by prompting ChatGPT\n * */\n\n@WebServlet(\n        name = \"grammar form question generation servlet\",\n        description = \"For generating questions via an LLM for students to practice grammatic form\",\n        urlPatterns = GrammarFormQuestionGenerationServlet.URL_PATH\n)\n/*Set who can access - both students and teachers should be able to access this feature*/\n@ServletSecurity(value = @HttpConstraint(rolesAllowed = {\"USER_ACTIVATED\", \"TEACHER_ACTIVATED\", \"ADMIN\"}))\n\npublic class GrammarFormQuestionGenerationServlet extends HttpServlet {\n\n    public static final String GROQ_SERVICE_PATH = \"https://api.groq.com/openai/v1/chat/completions\";\n    public static final String URL_PATH = \"/question/generation\";\n    //Get API Key that was set as environmental variable\n    String groqAPIkey = System.getenv(\"GROQ_API_KEY\");\n\n    /**Set the parameters here */\n    // grammar construct and num of questions\n    public static String PARAM_CONSTRUCT = \"grammar_construct\";\n    public static String PARAM_NUM_OF_QUESTIONS = \"num_ques\";\n    public static String PARAM_CEFR_LVL = \"cefr_lvl\"; //ideally pulled from construct description\n\n\n    /**Override doGet method to send the prompt to GPT API for generation\n     * req is the HTTP request sent by the user\n     * resp is the HTTP response sent back to the user and receive response back\n     */\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n\n        //parse request to recevieve parameters to include in prompt\n        String par_construct = req.getParameter(PARAM_CONSTRUCT);\n        int par_num = Integer.parseInt(req.getParameter(PARAM_NUM_OF_QUESTIONS));\n        String par_level = req.getParameter(PARAM_CEFR_LVL);\n\n        //handle cases for empty parameters or negative numbers\n        if (par_construct == null || par_num <= 0 ) {\n            resp.setContentType(\"application/json\");\n            resp.setCharacterEncoding(\"UTF-8\");\n            //error message must be returned as json format\n            resp.getWriter().write(\"{\\\"error\\\": \\\"Missing parameters: Grammar Form and number of questions required.\\\"}\");\n        }\n\n        //also handle case for too many questions being generated at once?? up to 20 questions?\n        if (par_num > 20) {\n            resp.setContentType(\"application/json\");\n            resp.setCharacterEncoding(\"UTF-8\");\n            resp.getWriter().write(\"{\\\"error\\\": \\\"Too Many Questions: You can only generate 20 or less questions at a time.\\\"}\");\n        }\n\n\n        try {\n            //add the prompt builder here which will assemble the prompt\n            String prompt = constructPrompt(par_construct, par_level , par_num);\n\n            //New request body to assemble the request\n            RequestBody body = new RequestBody();\n\n            //create list of messages to hold conversation messages i.e. system message, user message etc.\n            List<LMmessage> messages = new ArrayList<LMmessage>();\n\n            //System level instruction, role and content\n            LMmessage systemMsg = new LMmessage(ROLE_SYSTEM, \"You are an EFL teacher who teaches English to non-native school students aged 10-18 \");\n\n            //User message - user role and prompt\n            LMmessage userMsg = new LMmessage(ROLE_USER, prompt);\n\n            messages.add(systemMsg);\n            messages.add(userMsg);\n            body.setMessages(messages);\n\n            //convert to JSON\n            String requestBodyJson = new Gson().toJson(body);\n\n            //finally send prompt too Groq\n            String questions = sendRequestReturnRawResponse(requestBodyJson);\n\n            //recieve generation and parse and send to front end\n            resp.setContentType (\"application/json\");\n            resp.setCharacterEncoding(\"UTF-8\");\n            resp.getWriter().write(questions);\n        } catch (Exception e) {\n           e.printStackTrace();\n        }\n\n    }\n\n    //method for constructing prompt\n    private String constructPrompt(String construct, String level, int n){\n        return \"You are an EFL teacher who teaches English to non-native school students \" +\n                \"aged 10-18. Generate \" + n +\"grammar questions in a \" +\n                \"fill-in-the-blank format with a CEFR level of \" + level + \"on the topic \" +\n                \"of \" + construct + \".Ensure that the questions provide students with opportunities \" +\n                \"to practice the topic from different perspectives and align with their level of knowledge. \" +\n                \"Your resonse should be in the following JSON format: { \\\"topic\\\" : \\\"TOPIC_HERE\\\", \\\"questions\\\" : [\\\"question\\\": \\\"QUESTION_HERE\\\", \\\"answer\\\" : \\\" ANSWER_HERE\\\"] }\";\n    }\n\n    // method for sending request to Groq and returning raw response\n    private String sendRequestReturnRawResponse(String requestBodyJson) throws IOException {\n        URL url = new URL(GROQ_SERVICE_PATH);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"POST\"); // post request\n        connection.setRequestProperty(\"Content-Type\", \"application/json\");\n        connection.setRequestProperty(\"Authorization\", \"Bearer \" + groqAPIkey);\n        connection.setDoOutput(true);\n\n        try (OutputStream os = connection.getOutputStream()) {\n            byte[] bytes = requestBodyJson.getBytes(\"UTF-8\"); //convert to bytes to send over HTTP\n            os.write(bytes, 0, bytes.length); // this sends the byte array to the API\n        }\n\n        int responseCode = connection.getResponseCode();\n        Scanner scanner = new Scanner(connection.getInputStream(), \"UTF-8\");\n        String response = scanner.useDelimiter(\"\\\\A\").next(); // convert byte stream into string\n        scanner.close();\n\n        // anything besides 200 means an error occured\n        if (responseCode != 200) {\n            return \"{\\\"error\\\": \\\"Failed to fetch data from Groq API\\\"}\";\n        }\n\n        return response;\n\n    }\n\n\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/aiedwise2024/aiedproject/GrammarFormQuestionGenerationServlet.java b/src/main/java/org/aiedwise2024/aiedproject/GrammarFormQuestionGenerationServlet.java
--- a/src/main/java/org/aiedwise2024/aiedproject/GrammarFormQuestionGenerationServlet.java	(revision ce66994ba9dff9fd442461479aab4a4359871117)
+++ b/src/main/java/org/aiedwise2024/aiedproject/GrammarFormQuestionGenerationServlet.java	(date 1741611400885)
@@ -32,7 +32,7 @@
         urlPatterns = GrammarFormQuestionGenerationServlet.URL_PATH
 )
 /*Set who can access - both students and teachers should be able to access this feature*/
-@ServletSecurity(value = @HttpConstraint(rolesAllowed = {"USER_ACTIVATED", "TEACHER_ACTIVATED", "ADMIN"}))
+//@ServletSecurity(value = @HttpConstraint(rolesAllowed = {"USER_ACTIVATED", "TEACHER_ACTIVATED", "ADMIN"}))
 
 public class GrammarFormQuestionGenerationServlet extends HttpServlet {
 
Index: docker-compose.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docker-compose.yml b/docker-compose.yml
deleted file mode 100644
--- a/docker-compose.yml	(revision ce66994ba9dff9fd442461479aab4a4359871117)
+++ /dev/null	(revision ce66994ba9dff9fd442461479aab4a4359871117)
@@ -1,10 +0,0 @@
-version: "3.8"
-
-services:
-  aiedproject:
-    container_name: aied-container
-    build: .
-    ports:
-      - "8080:8080"
-    environment:
-      - GROQ_API_KEY=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
